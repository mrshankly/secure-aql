#############################
##    Database creation    ##
#############################

CREATE_DB=(
	"CREATE UPDATE-WINS TABLE Artist(Name VARCHAR PRIMARY KEY, Age INT, Country VARCHAR DEFAULT 'ENG');"
	"CREATE DELETE-WINS TABLE Album(Title VARCHAR PRIMARY KEY, Art VARCHAR FOREIGN KEY UPDATE-WINS REFERENCES Artist(Name) ON DELETE CASCADE, Year INT);"
	"CREATE UPDATE-WINS TABLE Track(Title VARCHAR PRIMARY KEY, Alb VARCHAR FOREIGN KEY DELETE-WINS REFERENCES Album(Title) ON DELETE CASCADE);"
)
CREATE_DB2=(
	"CREATE UPDATE-WINS TABLE Sells(Id VARCHAR PRIMARY KEY, Alb VARCHAR FOREIGN KEY DELETE-WINS REFERENCES Album(Title) ON DELETE CASCADE, Stock COUNTER_INT CHECK (Stock > 0), Sold COUNTER_INT CHECK (Sold < 20));"
)
CREATE_DB3=(
	"CREATE UPDATE-WINS TABLE Artist(Name VARCHAR PRIMARY KEY, Age INT, Country VARCHAR DEFAULT 'EN');"
	"CREATE DELETE-WINS TABLE Album(Title VARCHAR PRIMARY KEY, Art VARCHAR FOREIGN KEY REFERENCES Artist(Name) ON DELETE CASCADE, Year INT);"
	"CREATE UPDATE-WINS TABLE Award(Id VARCHAR PRIMARY KEY, Art VARCHAR FOREIGN KEY REFERENCES Artist(Name) ON DELETE CASCADE);"
	"CREATE UPDATE-WINS TABLE Track(Title VARCHAR PRIMARY KEY, Alb VARCHAR FOREIGN KEY UPDATE-WINS REFERENCES Album(Title) ON DELETE CASCADE, Awrd VARCHAR FOREIGN KEY UPDATE-WINS REFERENCES Award(Id) ON DELETE CASCADE);"
)

SEC_IDX=(
	"CREATE INDEX CountryIdx ON Artist (Country);"
	"CREATE INDEX ArtIdx ON Album (Art);"
	"CREATE INDEX AlbIdx ON Track (Alb);"
)
SEC_IDX2=(
	"CREATE INDEX SoldIdx ON Sells (Sold);"
)
SEC_IDX3=(
	"CREATE INDEX YearIdx ON Album (Year);"
)

#############################
## Database initialization ##
#############################

INIT_DB=(
	"INSERT INTO Artist (Name, Age) VALUES ('Sam', 22);"
	"INSERT INTO Artist (Name, Age, Country) VALUES ('Rob', 25, 'ITA');"
	"INSERT INTO Artist (Name, Age, Country) VALUES ('Jon', 40, 'USA');"
	"INSERT INTO Artist (Name, Age, Country) VALUES ('Ken', 33, 'AUS');"
	"INSERT INTO Artist (Name, Age, Country) VALUES ('Ann', 17, 'USA');"

	"INSERT INTO Album (Title, Art, Year) VALUES ('A0', 'Sam', 2016);"
	"INSERT INTO Album (Title, Art, Year) VALUES ('A1', 'Sam', 2008);"
	"INSERT INTO Album (Title, Art, Year) VALUES ('A2', 'Rob', 2012);"
	"INSERT INTO Album (Title, Art, Year) VALUES ('A3', 'Jon', 1998);"
	"INSERT INTO Album (Title, Art, Year) VALUES ('A4', 'Jon', 2005);"
	"INSERT INTO Album (Title, Art, Year) VALUES ('A5', 'Jon', 2001);"
	"INSERT INTO Album (Title, Art, Year) VALUES ('A6', 'Ken', 2006);"

	"INSERT INTO Track (Title, Alb) VALUES ('Hello', 'A0');"
	"INSERT INTO Track (Title, Alb) VALUES ('World', 'A0');"
	"INSERT INTO Track (Title, Alb) VALUES ('Goodbye', 'A1');"
	"INSERT INTO Track (Title, Alb) VALUES ('People', 'A1');"
	"INSERT INTO Track (Title, Alb) VALUES ('Welcome', 'A2');"
	"INSERT INTO Track (Title, Alb) VALUES ('Friend', 'A2');"
)
INIT_DB2=(
	"INSERT INTO Sells (Id, Alb, Stock, Sold) VALUES (1, 'A0', 20, 0);"
	"INSERT INTO Sells (Id, Alb, Stock, Sold) VALUES (2, 'A1', 20, 0);"
	"INSERT INTO Sells (Id, Alb, Stock, Sold) VALUES (3, 'A2', 20, 0);"
	"UPDATE Sells SET Sold = Sold + 5 WHERE Id = 1;"
)
INIT_DB3=(
	"INSERT INTO Artist (Name, Age) VALUES ('Sam', 22);"
	"INSERT INTO Artist (Name, Age, Country) VALUES ('Rob', 25, 'ITA');"
	"INSERT INTO Artist (Name, Age, Country) VALUES ('Jon', 40, 'USA');"

	"INSERT INTO Album (Title, Art, Year) VALUES ('A0', 'Sam', 2016);"
	"INSERT INTO Album (Title, Art, Year) VALUES ('A1', 'Sam', 2008);"
	"INSERT INTO Album (Title, Art, Year) VALUES ('A2', 'Rob', 2012);"
	"INSERT INTO Album (Title, Art, Year) VALUES ('A3', 'Jon', 1998);"

	"INSERT INTO Award (Id, Art) VALUES ('Aw0', 'Sam');"
	"INSERT INTO Award (Id, Art) VALUES ('Aw1', 'Rob');"
	"INSERT INTO Award (Id, Art) VALUES ('Aw2', 'Jon');"

	"INSERT INTO Track (Title, Alb, Awrd) VALUES ('Hello', 'A0', 'Aw0');"
	"INSERT INTO Track (Title, Alb, Awrd) VALUES ('World', 'A2', 'Aw1');"
	"INSERT INTO Track (Title, Alb, Awrd) VALUES ('Goodbye', 'A3', 'Aw2');"
)

UPD_DB=(
	"DELETE FROM Artist WHERE Name = 'Jon';"
	"DELETE FROM Album WHERE Title = 'A2';"
)
UPD_DB2=(
	"DELETE FROM Artist WHERE Name = 'Jon';"
)

#############################
##         Queries         ##
#############################

QUERIES1=(
	"SELECT * FROM Album WHERE Year > 2000 AND Art = 'Jon' OR Year < 2018 AND Year > 2002;"
	"SELECT * FROM Album WHERE Year > 2010 OR Art = 'Jon' AND Year < 2018 AND Art = 'Ken';"
	"SELECT * FROM Album WHERE Year > 2010 OR (Art = 'Jon' AND Year < 2018 AND Art = 'Ken');"
	"SELECT * FROM Album WHERE ((Year > 2000 AND Art = 'Jon') OR Year < 2018) AND Year > 2002;"
)
EXPECTED1=(6 2 2 5) # number of tuples expected to be returned by each one of the queries

QUERIES2=(
	"SELECT * FROM Artist WHERE Age > 25;"
	"SELECT * FROM Artist WHERE Name = 'Sam' OR Country = 'ITA';"
	"SELECT * FROM Artist WHERE Age > 25 OR (Country = 'USA' AND Age < 20);"
)
EXPECTED2=(2 2 3)

QUERIES3=(
	"SELECT Name, Country FROM Artist WHERE Age >= 20 AND Age <= 33;"
	"SELECT Alb FROM Track WHERE Title >= 'People' OR Alb = 'A2';"
	"SELECT Title FROM Album WHERE Year >= 1998 AND Year <= 2005 OR Art = 'Ken';"
)
EXPECTED3=(3 4 4)

QUERIES4=(
	"SELECT * FROM Sells WHERE Sold >= 5;"
	"SELECT * FROM Sells WHERE Sold < 5;"
)
EXPECTED4=(1 2)

QUERIES5=(
	"SELECT * FROM Album WHERE Art = 'Rob' AND (Year >= 2012 OR Year >= 2001) AND Year <= 2012 OR Art = 'Jon' AND Year = 2001;"
	"SELECT * FROM Album WHERE (Art = 'Rob' AND Year >= 2012) OR (Year >= 2001 AND Year <= 2012) OR (Art = 'Jon' AND Year = 2001);"
	"SELECT * FROM Album WHERE Art = 'Rob' AND (Year >= 2012 OR Year >= 2001) AND (Year <= 2012 OR Art = 'Jon') AND Year = 2001;"
)
EXPECTED5=(2 5 0)

QUERIES6=(
	"SELECT * FROM Artist WHERE Age >= 25;"
	"SELECT * FROM Album;"
	"SELECT * FROM Track;"
)
EXPECTED6=(2 3 4)

QUERIES7=(
	"SELECT * FROM Album WHERE Art <> 'Sam' AND Year <= 2008 AND Year <> 2005;"
	"SELECT * FROM Album WHERE Art <> 'Sam' AND Art = 'Jon' OR Year = 2012;"
	"SELECT * FROM Album WHERE Year = 2001 AND Year >= 2002 OR Year <= 2012 AND Year > 2006;"
	"SELECT * FROM Album WHERE Year = 2005 AND Year <> 2005;"
	"SELECT * FROM Track WHERE Alb = 'A1' OR ((Title = 'Friend' AND Alb <> 'A1') AND Alb = 'A1');"
	"SELECT * FROM Track WHERE Alb <> 'A1' AND Alb <> 'A1';"
)
EXPECTED7=(3 4 2 0 2 4)

QUERIES8=(
	"SELECT * FROM Artist;"
	"SELECT * FROM Album;"
	"SELECT * FROM Award;"
	"SELECT * FROM Track;"
)
EXPECTED8=(3 4 3 3)
# QUERIES8, but with the deletion of Artist('Jon')
EXPECTED9=(2 3 2 2)

#############################
##          Tests          ##
#############################

## Test 1 -- no secondary indexes
TEST1[0]="${CREATE_DB[@]}"
TEST1[1]="${INIT_DB[@]}"
TEST1[2]="${QUERIES1[@]}"
TEST1[3]="${EXPECTED1[@]}"

## Test 2 -- with secondary indexes
TEST2[0]="${CREATE_DB[@]} ${SEC_IDX[@]}"
TEST2[1]="${INIT_DB[@]}"
TEST2[2]="${QUERIES2[@]}"
TEST2[3]="${EXPECTED2[@]}"

## Test 3 -- test projection
TEST3[0]="${CREATE_DB[@]} ${SEC_IDX[@]}"
TEST3[1]="${INIT_DB[@]}"
TEST3[2]="${QUERIES3[@]}"
TEST3[3]="${EXPECTED3[@]}"

## Test 4 -- first, data insertion; second, index creation
TEST4[0]="${CREATE_DB[@]}"
TEST4[1]="${INIT_DB[@]} ${SEC_IDX[@]}"
TEST4[2]="${QUERIES3[@]}"
TEST4[3]="${EXPECTED3[@]}"

## Test 5 -- first, index creation; second, data insertion + bounded counter column as an index
TEST5[0]="${CREATE_DB[@]} ${CREATE_DB2[@]} ${SEC_IDX[@]} ${SEC_IDX2[@]}"
TEST5[1]="${INIT_DB[@]} ${INIT_DB2[@]}"
TEST5[2]="${QUERIES3[@]} ${QUERIES4[@]}"
TEST5[3]="${EXPECTED3[@]} ${EXPECTED4[@]}"

## Test 6 -- similar to test 5 but the data is inserted first and indexes are created afterwards
TEST6[0]="${CREATE_DB[@]} ${CREATE_DB2[@]}"
TEST6[1]="${INIT_DB[@]} ${INIT_DB2[@]} ${SEC_IDX[@]} ${SEC_IDX2[@]}"
TEST6[2]="${QUERIES3[@]} ${QUERIES4[@]}"
TEST6[3]="${EXPECTED3[@]} ${EXPECTED4[@]}"

## Test 7 -- two indexes in a same table
TEST7[0]="${CREATE_DB[@]}"
TEST7[1]="${INIT_DB[@]} ${SEC_IDX[@]} ${SEC_IDX3[@]}"
TEST7[2]="${QUERIES5[@]}"
TEST7[3]="${EXPECTED5[@]}"

## Test 8 -- delete some records
TEST8[0]="${CREATE_DB[@]} ${SEC_IDX[@]}"
TEST8[1]="${INIT_DB[@]} ${UPD_DB[@]}"
TEST8[2]="${QUERIES6[@]}"
TEST8[3]="${EXPECTED6[@]}"

## Test 9 -- test range queries and inequalities; no secondary indexes
TEST9[0]="${CREATE_DB[@]}"
TEST9[1]="${INIT_DB[@]}"
TEST9[2]="${QUERIES7[@]}"
TEST9[3]="${EXPECTED7[@]}"

## Test 10 -- test 9 with secondary indexes
TEST10[0]="${CREATE_DB[@]}"
TEST10[1]="${INIT_DB[@]} ${SEC_IDX[@]} ${SEC_IDX3[@]}"
TEST10[2]="${QUERIES7[@]}"
TEST10[3]="${EXPECTED7[@]}"

## Test 11 -- four tables, two of them with no-concurrency f.k. semantics
TEST11[0]="${CREATE_DB3[@]}"
TEST11[1]="${INIT_DB3[@]}"
TEST11[2]="${QUERIES8[@]}"
TEST11[3]="${EXPECTED8[@]}"

## Test 12 -- test 11, but with the deletion of Album('Jon')
TEST12[0]="${CREATE_DB3[@]}"
TEST12[1]="${INIT_DB3[@]} ${UPD_DB2[@]}"
TEST12[2]="${QUERIES8[@]}"
TEST12[3]="${EXPECTED9[@]}"
